#!/usr/bin/env bash

#################################################################
# Script for creating and activating a virtual envvironment.
#
# The venv is placed in a dedicated directory for holding venvs.
# The default python version used is whatever is represented by 
# the command `python`.
#################################################################

print_usage(){
    echo "Usage: _switch_virtualenv venv_name [-p python_executable]"
    echo "           [-r requirements_file]"
    echo "    -p, --python PYTHON_EXECUTABLE"
    echo "        Path to python executable to use in the virtualenv."
    echo "        Defaults to the python executable behind the default"
    echo "        'python' command."
    echo "    -r, --requirement REQUIREMENT_FILE"
    echo "        Path to requirements file. This is passed to pip -r."
    echo "    --system-site-packages"
    echo "        Give access to the global site-packages modules to the"
    echo "        virtual environment."
}

# Join an array of strings.
joinString() {
    local separator="$1" # e.g. constructing regex, pray it does not contain %s
    declare -a args=("${!2}")
    local regex="$( printf "${separator}%s" "${args[@]}" )"
    regex="${regex:${#separator}}" # remove leading separator
    echo "${regex}"
}

venv_name=""
python_exe="python"
help=false
requirements=()
system_site_packages=""

# Normally, this would be $# > 1, but the first arg is already parsed.
while [[ $# > 0 ]]; do
    key="$1"
    case $key in
        -p|--python)
            python_exe="$2"
            shift
            ;;
        -r|--requirement)
            requirements+=("$2")
            shift
            ;;
        --system-site-packages)
            system_site_packages="--system-site-packages"
            ;;
        -h|--help)
            help=true
            ;;
        *)
            venv_name="$key"
            ;;
    esac
    shift # past argument or value
done


venv_args="-p $python_exe $system_site_packages $venv"


if [[ $help == "true" ]] || [ -z $venv_name ]; then
    print_usage
else
    VENV_DIR="${VENV_DIR:-/home/$USER/.venvs}"
    venv="$VENV_DIR/$venv_name"

    if [ -d "$venv" ]; then
        # venv exists; activate the venv
        . $venv/bin/activate
        if [ "$?" != 0 ]; then
            # Create then try again
            virtualenv $venv_args
            . $venv/bin/activate
        fi
    else
        # venv doesn't exist; create it
        virtualenv $venv_args
        . $venv/bin/activate

        # Updgrade pip
        pip install -U pip

        # Install any starting python modules
        # Absolute path to this script's directory
        script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        requirements_file="$script_dir/requirements.txt"

        # Get any requirements passed as args
        extra_requirements=$(joinString ' -r ' requirements[@])

        if [ -f $requirements_file ]; then
            pip install -r $requirements_file

            # Run in separate command to avoid duplicate requirements
            # error thrown by pip
            if [ ! -z $extra_requirements ]; then
                pip install -r $extra_requirements
            fi
        fi
    fi
fi

